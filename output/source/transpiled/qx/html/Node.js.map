{
  "version": 3,
  "sources": [
    "/home/derrell/ME/FRC/training/elevatorSim/node_modules/@qooxdoo/framework/source/class/qx/html/Node.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "nodeName",
    "_nodeName",
    "statics",
    "fromDomNode",
    "domNode",
    "Assert",
    "assertTrue",
    "$$element",
    "$$elementObject",
    "toHashCode",
    "toVirtualNode",
    "html",
    "Factory",
    "getInstance",
    "createElement",
    "attributes",
    "useNode",
    "properties",
    "visible",
    "init",
    "nullable",
    "check",
    "apply",
    "event",
    "members",
    "_domNode",
    "_parent",
    "_qxObject",
    "_included",
    "_children",
    "_modifiedChildren",
    "_propertyJobs",
    "_properties",
    "__eventValues",
    "connectObject",
    "qxObject",
    "$$qxObjectHash",
    "$$qxObject",
    "Environment",
    "get",
    "updateObjectId",
    "disconnectObject",
    "_createDomElement",
    "Error",
    "classname",
    "serialize",
    "writer",
    "temporaryQxObjectId",
    "getQxObjectId",
    "setQxObjectId",
    "id",
    "Id",
    "getAbsoluteIdOf",
    "isIdRoot",
    "register",
    "result",
    "undefined",
    "_serializeImpl",
    "buffer",
    "args",
    "lang",
    "Array",
    "fromArguments",
    "arguments",
    "append",
    "join",
    "unregister",
    "getAttribute",
    "self",
    "convert",
    "children",
    "fromCollection",
    "childNodes",
    "map",
    "domChild",
    "child",
    "nodeType",
    "window",
    "Node",
    "ELEMENT_NODE",
    "owningQxObjectId",
    "qxObjectId",
    "owningQxObject",
    "pos",
    "lastIndexOf",
    "substring",
    "getQxObject",
    "htmlNode",
    "install",
    "htmlChildren",
    "mapEntry",
    "_useNodeImpl",
    "rootMap",
    "flush",
    "_insertChildren",
    "newChildren",
    "_connectDomNode",
    "_copyData",
    "lookup",
    "oldChildren",
    "clone",
    "forEach",
    "parentElement",
    "removeChild",
    "appendChild",
    "_scheduleChildrenUpdate",
    "isInDocument",
    "document",
    "body",
    "setAttribute",
    "_cascadeQxObjectIdChanges",
    "Element",
    "_modified",
    "_scheduleFlush",
    "_flush",
    "DEBUG",
    "debug",
    "length",
    "i",
    "isVisible",
    "_syncData",
    "_syncChildren",
    "isRoot",
    "isInRoot",
    "tmp",
    "_willBeSeeable",
    "_hasRoots",
    "pa",
    "domElement",
    "createDocumentFragment",
    "dataChildren",
    "dataLength",
    "dataChild",
    "dataEl",
    "domParent",
    "domChildren",
    "domPos",
    "domEl",
    "domOperations",
    "insertBefore",
    "fromMarkup",
    "propertiesFromDom",
    "elem",
    "data",
    "domEvents",
    "manager",
    "Registration",
    "getManager",
    "findHandler",
    "type",
    "importListeners",
    "key",
    "prop",
    "value",
    "call",
    "set",
    "jobs",
    "_addChildImpl",
    "__root",
    "remove",
    "_removeChildImpl",
    "_moveChildImpl",
    "getChildren",
    "getChild",
    "index",
    "hasChildren",
    "indexOf",
    "hasChild",
    "add",
    "varargs",
    "addImpl",
    "arr",
    "Type",
    "isArray",
    "push",
    "addAt",
    "insertAt",
    "childs",
    "removeImpl",
    "removeAt",
    "removeAll",
    "l",
    "getParent",
    "insertInto",
    "parent",
    "rel",
    "insertAfter",
    "moveTo",
    "oldIndex",
    "moveBefore",
    "moveAfter",
    "free",
    "getDomElement",
    "create",
    "getNodeName",
    "setNodeName",
    "name",
    "toLowerCase",
    "include",
    "exclude",
    "isIncluded",
    "_applyVisible",
    "registerProperty",
    "Function",
    "bind",
    "_applyProperty",
    "log",
    "Logger",
    "deprecatedMethodWarning",
    "_setProperty",
    "direct",
    "_removeProperty",
    "_getProperty",
    "fn",
    "addListener",
    "listener",
    "capture",
    "$$disposed",
    "msg",
    "assertString",
    "assertFunction",
    "assertObject",
    "assertBoolean",
    "registerDomEvent",
    "unique",
    "Manager",
    "getNextUniqueId",
    "supportsEvent",
    "domEventId",
    "removeListener",
    "$$wrapped_callback",
    "callback",
    "values",
    "entry",
    "removeListenerById",
    "hasListener",
    "has",
    "getListeners",
    "listeners",
    "serializeListeners",
    "listenerData",
    "handler",
    "destruct",
    "el",
    "removeAllListeners",
    "ObjectRegistry",
    "inShutDown",
    "_disposeArray"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * John Spackman (https://github.com/johnspackman)\n\n************************************************************************ */\n\n/**\n * High-performance, high-level DOM element creation and management.\n *\n * Mirrors the DOM structure of Node (see also Element and Text) so to provide \n * DOM insertion and modification with advanced logic to reduce the real transactions.\n *\n * Each child itself also has got some powerful methods to control its\n * position:\n * {@link #getParent}, {@link #free},\n * {@link #insertInto}, {@link #insertBefore}, {@link #insertAfter},\n * {@link #moveTo}, {@link #moveBefore}, {@link #moveAfter},\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @require(qx.module.Animation)\n */\nqx.Class.define(\"qx.html.Node\",\n{\n  extend : qx.core.Object,\n  implement : [ qx.core.IDisposable ],\n  \n  \n  /**\n   * Creates a new Element\n   *\n   * @param nodeName {String} name of the node; will be a tag name for Elements, otherwise it's a reserved\n   * name eg \"#text\"\n   */\n  construct : function(nodeName)\n  {\n    this.base(arguments);\n    this._nodeName = nodeName;\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n\n    /**\n     * Finds the Widget for a given DOM element\n     *\n     * @param domElement {DOM} the DOM element\n     * @return {qx.ui.core.Widget} the Widget that created the DOM element\n     */\n    fromDomNode: function(domNode) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertTrue((!domNode.$$element && !domNode.$$elementObject) ||\n            domNode.$$element === domNode.$$elementObject.toHashCode());\n      }\n      return domNode.$$elementObject;\n    },\n\n    /**\n     * Converts a DOM node into a qx.html.Node, providing the existing instance if\n     * there is one\n     * \n     * @param {Node} domNode \n     * @returns {qx.html.Node}\n     */\n    toVirtualNode(domNode) {\n      if (domNode.$$elementObject) {\n        return domNode.$$elementObject;\n      }\n\n      let html = qx.html.Factory.getInstance().createElement(domNode.nodeName, domNode.attributes);\n      html.useNode(domNode);\n      return html;\n    }\n\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties : {\n    /**\n     * Controls whether the element is visible which means that a previously applied\n     * CSS style of display=none gets removed and the element will inserted into the DOM, \n     * when this had not already happened before.\n     * \n     * If the element already exists in the DOM then it will kept in DOM, but configured \n     * hidden using a CSS style of display=none.\n     * \n     * Please note: This does not control the visibility or parent inclusion recursively.\n     * \n     * @type {Boolean} Whether the element should be visible in the render result\n     */\n    visible: {\n      init: true,\n      nullable: true,\n      check: \"Boolean\",\n      apply: \"_applyVisible\",\n      event: \"changeVisible\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      PROTECTED HELPERS/DATA\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {String} the name of the node */\n    _nodeName : null,\n\n    /** @type {Node} DOM node of this object */\n    _domNode : null,\n\n    /** @type {qx.html.Element} parent element */\n    _parent : null,\n    \n    /** @type {qx.core.Object} the Qooxdoo object this node is attached to */\n    _qxObject : null,\n\n    /** @type {Boolean} Whether the element should be included in the render result */\n    _included : true,\n\n    _children : null,\n    _modifiedChildren : null,\n\n    _propertyJobs : null,\n    _properties : null,\n    \n    /** @type {Map} map of event handlers */\n    __eventValues: null,\n\n\n    /**\n     * Connects a widget to this element, and to the DOM element in this Element.  They\n     * remain associated until disposed or disconnectObject is called\n     *\n     * @param qxObject {qx.core.Object} the object to associate\n     */\n    connectObject: function(qxObject) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertTrue(!this._qxObject || this._qxObject === qxObject);\n      }\n\n      this._qxObject = qxObject;\n      if (this._domNode) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertTrue((!this._domNode.$$qxObjectHash && !this._domNode.$$qxObject) ||\n              (this._domNode.$$qxObject === qxObject && this._domNode.$$qxObjectHash === qxObject.toHashCode()));\n        }\n\n        this._domNode.$$qxObjectHash = qxObject.toHashCode();\n        this._domNode.$$qxObject = qxObject;\n      }\n\n      if (qx.core.Environment.get(\"module.objectid\")) {\n        this.updateObjectId();\n      }\n    },\n\n\n    /**\n     * Disconnects a widget from this element and the DOM element.  The DOM element remains\n     * untouched, except that it can no longer be used to find the Widget.\n     *\n     * @param qxObject {qx.core.Object} the Widget\n     */\n    disconnectObject: function(qxObject) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertTrue(this._qxObject === qxObject);\n      }\n\n      delete this._qxObject;\n      if (this._domNode) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertTrue((!this._domNode.$$qxObjectHash && !this._domNode.$$qxObject) ||\n              (this._domNode.$$qxObject === qxObject && this._domNode.$$qxObjectHash === qxObject.toHashCode()));\n        }\n\n        this._domNode.$$qxObjectHash = \"\";\n        delete this._domNode.$$qxObject;\n      }\n      \n      if (qx.core.Environment.get(\"module.objectid\")) {\n        this.updateObjectId();\n      }\n    },\n\n    /**\n     * Internal helper to generate the DOM element\n     *\n     * @return {Element} DOM element\n     */\n    _createDomElement : function() {\n      throw new Error(\"No implementation for \" + this.classname + \"._createDomElement\");\n    },\n    \n    /**\n     * Serializes the virtual DOM element to a writer; the `writer` function accepts\n     *  an varargs, which can be joined with an empty string or streamed.\n     *  \n     * If writer is null, the element will be serialised to a string which is returned;\n     * note that if writer is not null, the return value will be null\n     * \n     * @param writer {Function?} the writer\n     * @return {String?} the serialised version if writer is null\n     */\n    serialize: function(writer) {\n      var temporaryQxObjectId = !this.getQxObjectId();\n      if (temporaryQxObjectId) {\n        this.setQxObjectId(this.classname);\n      }\n      var id = qx.core.Id.getAbsoluteIdOf(this, true);\n      var isIdRoot = !id;\n      if (isIdRoot) {\n        qx.core.Id.getInstance().register(this);\n      }\n      \n      var result = undefined;\n      if (writer) {\n        this._serializeImpl(writer);\n      } else {\n        var buffer = [];\n        this._serializeImpl(function() {\n          var args = qx.lang.Array.fromArguments(arguments);\n          qx.lang.Array.append(buffer, args);\n        });\n        result = buffer.join(\"\"); \n      }\n      \n      if (isIdRoot) {\n        qx.core.Id.getInstance().unregister(this);\n      }\n      if (temporaryQxObjectId) {\n        this.setQxObjectId(null);\n      }\n      \n      return result;\n    },\n\n    /**\n     * Serializes the virtual DOM element to a writer; the `writer` function accepts\n     *  an varargs, which can be joined with an empty string or streamed.\n     * \n     * @param writer {Function} the writer\n     */\n    _serializeImpl: function(writer) {\n      throw new Error(\"No implementation for \" + this.classname + \".serializeImpl\");\n    },\n\n    /**\n     * Uses an existing element instead of creating one. This may be interesting\n     * when the DOM element is directly needed to add content etc.\n     *\n     * @param domNode {Node} DOM Node to reuse\n     */\n    useNode: function(domNode) {\n      var id = domNode.getAttribute(\"data-qx-object-id\");\n      if (id) {\n        this.setQxObjectId(id);\n      }\n      var temporaryQxObjectId = !this.getQxObjectId();\n      if (temporaryQxObjectId) {\n        this.setQxObjectId(this.classname);\n      }\n      var id = qx.core.Id.getAbsoluteIdOf(this, true);\n      var isIdRoot = !id;\n      if (isIdRoot) {\n        qx.core.Id.getInstance().register(this);\n      }\n      \n      /*\n       * When merging children, we want to keep the original DOM nodes in\n       * domNode no matter what - however, where the DOM nodes have a qxObjectId\n       * we must reuse the original instances.\n       * \n       * The crucial thing is that the qxObjectId hierarchy and the DOM hierarchy\n       * are not the same (although they are often similar, the DOM will often have\n       * extra Nodes).\n       * \n       * However, because the objects in the qxObjectId space will typically already \n       * exist (eg accessed via the constructor) we do not want to discard the original\n       * instance of qx.html.Element because there are probably references to them in \n       * code.\n       * \n       * In the code below, we map the DOM heirarchy into a temporary Javascript\n       * hierarchy, where we can either use existing qx.html.Element instances (found\n       * by looking up the qxObjectId) or fabricate new ones.\n       * \n       * Once the temporary hierarchy is ready, we go back and synchronise each\n       * qx.html.Element with the DOM node and our new array of children.\n       * \n       * The only rule to this is that if you are going to call this `useNode`, then\n       * you must not keep references to objects *unless* you also access them via\n       * the qxObjectId mechanism.\n       */\n      \n      var self = this;\n      function convert(domNode) {\n        var children = qx.lang.Array.fromCollection(domNode.childNodes);\n        children = children\n          .map(function(domChild) {\n            var child = null;\n            if (domChild.nodeType == window.Node.ELEMENT_NODE) {\n              var id = domChild.getAttribute(\"data-qx-object-id\");\n              if (id) {\n                var owningQxObjectId = null;\n                var qxObjectId = null;\n                var owningQxObject = null;\n                var pos = id.lastIndexOf('/');\n                if (pos > -1) {\n                  owningQxObjectId = id.substring(0, pos);\n                  qxObjectId = id.substring(pos + 1);\n                  owningQxObject = qx.core.Id.getQxObject(owningQxObjectId);\n                  child = owningQxObject.getQxObject(qxObjectId);\n                } else {\n                  qxObjectId = id;\n                  owningQxObject = self;\n                  child = self.getQxObject(id);\n                }\n              }\n            }\n            if (!child) {\n              child = qx.html.Factory.getInstance().createElement(domChild.nodeName, domChild.attributes);\n            }\n            return {\n              htmlNode: child,\n              domNode: domChild,\n              children: convert(domChild)\n            };\n          });\n        return children;\n      }\n      \n      function install(map) {\n        var htmlChildren = map.children.map(function(mapEntry) {\n          install(mapEntry);\n          return mapEntry.htmlNode;\n        });\n        map.htmlNode._useNodeImpl(map.domNode, htmlChildren);\n      }\n      \n      var rootMap = {\n          htmlNode: this,\n          domNode: domNode,\n          children: convert(domNode)\n      };\n      \n      install(rootMap);\n      \n      this.flush();\n      this._insertChildren();\n      \n      if (isIdRoot) {\n        qx.core.Id.getInstance().unregister(this);\n      }\n      if (temporaryQxObjectId) {\n        this.setQxObjectId(null);\n      }\n    },\n    \n    /**\n     * Called internally to complete the connection to an existing DOM node\n     * \n     * @param domNode {DOMNode} the node we're syncing to \n     * @param newChildren {qx.html.Node[]} the new children\n     */\n    _useNodeImpl: function(domNode, newChildren) {\n      if (this._domNode) {\n        throw new Error(\"Could not overwrite existing element!\");\n      }\n\n      // Use incoming element\n      this._connectDomNode(domNode);\n      \n      // Copy currently existing data over to element\n      this._copyData(true, true);\n      \n      // Add children\n      var lookup = {};\n      var oldChildren = this._children ? qx.lang.Array.clone(this._children) : null;\n      newChildren.forEach(function(child) {\n        lookup[child.toHashCode()] = child;\n      });\n      this._children = newChildren;\n      \n      // Make sure that unused children are disconnected\n      if (oldChildren) {\n        oldChildren.forEach(function(child) {\n          if (!lookup[child.toHashCode()]) {\n            if (child._domNode && child._domNode.parentElement) {\n              child._domNode.parentElement.removeChild(child._domNode);\n            }\n            child._parent = null;\n          }\n        });\n      }\n      \n      var self = this;\n      this._children.forEach(function(child) {\n        child._parent = self;\n        if (child._domNode && child._domNode.parentElement !== self._domNode) {\n          child._domNode.parentElement.removeChild(child._domNode);\n          if (this._domNode) {\n            this._domNode.appendChild(child._domNode);\n          }\n        }\n      });\n      \n      if (this._domNode) {\n        this._scheduleChildrenUpdate();\n      }\n    },\n\n    /**\n     * Connects a DOM element to this Node; if this Node is already connected to a Widget\n     * then the Widget is also connected.\n     *\n     * @param domNode {DOM} the DOM Node to associate\n     */\n    _connectDomNode: function(domNode) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertTrue(!this._domNode || this._domNode === domNode);\n        qx.core.Assert.assertTrue((domNode.$$elementObject === this && domNode.$$element === this.toHashCode()) ||\n            (!domNode.$$elementObject && !domNode.$$element));\n      };\n\n      this._domNode = domNode;\n      domNode.$$elementObject = this;\n      domNode.$$element = this.toHashCode();\n      if (this._qxObject) {\n        domNode.$$qxObjectHash = this._qxObject.toHashCode();\n        domNode.$$qxObject = this._qxObject;\n      }\n    },\n    \n    \n    /**\n     * Detects whether the DOM node has been created and is in the document\n     * \n     * @return {Boolean}\n     */\n    isInDocument: function() {\n      if (document.body) {\n        for (var domNode = this._domNode; domNode != null; domNode = domNode.parentElement) {\n          if (domNode === document.body) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n    \n    \n    /**\n     * Updates the Object ID on the element to match the QxObjectId\n     */\n    updateObjectId: function() {\n      // Copy Object Id\n      if (qx.core.Environment.get(\"module.objectid\")) {\n        var id = this.getQxObjectId();\n        if (!id && this._qxObject) {\n          id = this._qxObject.getQxObjectId();\n        }\n\n        this.setAttribute(\"data-qx-object-id\", id, true);\n      }\n    },\n    \n    _cascadeQxObjectIdChanges: function() {\n      if (qx.core.Environment.get(\"module.objectid\")) {\n        this.updateObjectId();\n      }\n      this.base(arguments);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      FLUSH OBJECT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add the element to the global modification list.\n     *\n     */\n    _scheduleChildrenUpdate : function()\n    {\n      if (this._modifiedChildren) {\n        return;\n      }\n\n      this._modifiedChildren = true;\n\n      qx.html.Element._modified[this.toHashCode()] = this;\n      qx.html.Element._scheduleFlush(\"element\");\n    },\n\n\n    /**\n     * Syncs data of an HtmlElement object to the DOM.\n     * \n     * This is just a public wrapper around `flush`, because the scope has changed\n     * \n     * @deprecated {6.0} Please use `.flush()` instead\n     */\n    _flush : function() {\n      this.flush();\n    },\n\n\n    /**\n     * Syncs data of an HtmlElement object to the DOM.\n     *\n     */\n    flush : function()\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (this.DEBUG) {\n          this.debug(\"Flush: \" + this.getAttribute(\"id\"));\n        }\n      }\n\n      var length;\n      var children = this._children;\n      if (children)\n      {\n        length = children.length;\n        var child;\n        for (var i=0; i<length; i++)\n        {\n          child = children[i];\n\n          if (child.isVisible() && child._included && !child._domNode) {\n            child.flush();\n          }\n        }\n      }\n\n      if (!this._domNode)\n      {\n        this._connectDomNode(this._createDomElement());\n\n        this._copyData(false, false);\n\n        if (children && length > 0) {\n          this._insertChildren();\n        }\n      }\n      else\n      {\n        this._syncData();\n\n        if (this._modifiedChildren) {\n          this._syncChildren();\n        }\n      }\n\n      delete this._modifiedChildren;\n    },\n\n    /**\n     * Returns this element's root flag\n     * \n     * @return {Boolean}\n     */\n    isRoot : function() {\n      throw new Error(\"No implementation for \" + this.classname + \".isRoot\");\n    },\n\n    /**\n     * Detects whether this element is inside a root element\n     * \n     * @return {Boolean}\n     */\n    isInRoot: function() {\n      var tmp = this;\n      while (tmp) {\n        if (tmp.isRoot()) {\n          return true;\n        }\n        tmp = tmp._parent;\n      }\n      return false;\n    },\n\n    /**\n     * Walk up the internal children hierarchy and\n     * look if one of the children is marked as root.\n     *\n     * This method is quite performance hungry as it\n     * really walks up recursively.\n     * @return {Boolean} <code>true</code> if the element will be seeable\n     */\n    _willBeSeeable : function()\n    {\n      if (!qx.html.Element._hasRoots) {\n        return false;\n      }\n      var pa = this;\n\n      // Any chance to cache this information in the parents?\n      while(pa)\n      {\n        if (pa.isRoot()) {\n          return true;\n        }\n\n        if (!pa._included || !pa.isVisible()) {\n          return false;\n        }\n\n        pa = pa._parent;\n      }\n\n      return false;\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      SUPPORT FOR CHILDREN FLUSH\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Append all child nodes to the DOM\n     * element. This function is used when the element is initially\n     * created. After this initial apply {@link #_syncChildren} is used\n     * instead.\n     *\n     */\n    _insertChildren : function()\n    {\n      var children = this._children;\n      if (!children) {\n        return;\n      }\n      var length = children.length;\n      var child;\n\n      if (length > 2)\n      {\n        var domElement = document.createDocumentFragment();\n        for (var i=0; i<length; i++)\n        {\n          child = children[i];\n          if (child._domNode && child._included) {\n            domElement.appendChild(child._domNode);\n          }\n        }\n\n        this._domNode.appendChild(domElement);\n      }\n      else\n      {\n        var domElement = this._domNode;\n        for (var i=0; i<length; i++)\n        {\n          child = children[i];\n          if (child._domNode && child._included) {\n            domElement.appendChild(child._domNode);\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Synchronize internal children hierarchy to the DOM. This is used\n     * for further runtime updates after the element has been created\n     * initially.\n     *\n     */\n    _syncChildren : function()\n    {\n      var dataChildren = this._children||[];\n      var dataLength = dataChildren.length;\n      var dataChild;\n      var dataEl;\n\n      var domParent = this._domNode;\n      var domChildren = domParent.childNodes;\n      var domPos = 0;\n      var domEl;\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var domOperations = 0;\n      }\n\n      // Remove children from DOM which are excluded or remove first\n      for (var i=domChildren.length-1; i>=0; i--)\n      {\n        domEl = domChildren[i];\n        dataEl = qx.html.Node.fromDomNode(domEl);\n\n        if (!dataEl || !dataEl._included || dataEl._parent !== this)\n        {\n          domParent.removeChild(domEl);\n\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            domOperations++;\n          }\n        }\n      }\n\n      // Start from beginning and bring DOM in sync\n      // with the data structure\n      for (var i=0; i<dataLength; i++)\n      {\n        dataChild = dataChildren[i];\n\n        // Only process visible childs\n        if (dataChild._included)\n        {\n          dataEl = dataChild._domNode;\n          domEl = domChildren[domPos];\n\n          if (!dataEl) {\n            continue;\n          }\n\n          // Only do something when out of sync\n          // If the data element is not there it may mean that it is still\n          // marked as visible=false\n          if (dataEl != domEl)\n          {\n            if (domEl) {\n              domParent.insertBefore(dataEl, domEl);\n            } else {\n              domParent.appendChild(dataEl);\n            }\n\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              domOperations++;\n            }\n          }\n\n          // Increase counter\n          domPos++;\n        }\n      }\n\n      // User feedback\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.html.Element.DEBUG) {\n          this.debug(\"Synced DOM with \" + domOperations + \" operations\");\n        }\n      }\n    },\n    \n    \n    /**\n     * Copies data between the internal representation and the DOM. This\n     * simply copies all the data and only works well directly after\n     * element creation. After this the data must be synced using {@link #_syncData}\n     *\n     * @param fromMarkup {Boolean} Whether the copy should respect styles\n     *   given from markup\n     * @param propertiesFromDom {Boolean} whether the copy should respect the property\n     *  values in the dom\n     */\n    _copyData : function(fromMarkup, propertiesFromDom)\n    {\n      var elem = this._domNode;\n      \n      // Attach events\n      var data = this.__eventValues;\n      if (data)\n      {\n        // Import listeners\n        let domEvents = {};\n        let manager = qx.event.Registration.getManager(elem);\n        for (let id in data) {\n          if (manager.findHandler(elem, data[id].type)) {\n            domEvents[id] = data[id];\n          }\n        }\n        qx.event.Registration.getManager(elem).importListeners(elem, domEvents);\n\n        // Cleanup event map\n        // Events are directly attached through event manager\n        // after initial creation. This differs from the\n        // handling of styles and attributes where queuing happens\n        // through the complete runtime of the application.\n        delete this.__eventValues;\n      }\n      \n      // Copy properties\n      if (this._properties) {\n        for (var key in this._properties) {\n          var prop = this._properties[key];\n          if (propertiesFromDom) {\n            if (prop.get) {\n              prop.value = prop.get.call(this, key);\n            }\n          } else if (prop.value !== undefined) {\n            prop.set.call(this, prop.value, key);\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Synchronizes data between the internal representation and the DOM. This\n     * is the counterpart of {@link #_copyData} and is used for further updates\n     * after the element has been created.\n     *\n     */\n    _syncData : function()\n    {\n      // Sync misc\n      var jobs = this._propertyJobs;\n      if (jobs && this._properties) {\n        for (var key in jobs) {\n          var prop = this._properties[key];\n          if (prop.value !== undefined) {\n            prop.set.call(this, prop.value, key);\n          }\n        }\n\n        this._propertyJobs = null;\n      }\n    },\n\n\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PRIVATE HELPERS/DATA\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Internal helper for all children addition needs\n     *\n     * @param child {var} the element to add\n     * @throws {Error} if the given element is already a child\n     *     of this element\n     */\n    _addChildImpl : function(child)\n    {\n      if (child._parent === this) {\n        throw new Error(\"Child is already in: \" + child);\n      }\n\n      if (child.__root) {\n        throw new Error(\"Root elements could not be inserted into other ones.\");\n      }\n\n      // Remove from previous parent\n      if (child._parent) {\n        child._parent.remove(child);\n      }\n\n      // Convert to child of this object\n      child._parent = this;\n\n      // Prepare array\n      if (!this._children) {\n        this._children = [];\n      }\n\n      // Schedule children update\n      if (this._domNode) {\n        this._scheduleChildrenUpdate();\n      }\n    },\n\n\n    /**\n     * Internal helper for all children removal needs\n     *\n     * @param child {qx.html.Element} the removed element\n     * @throws {Error} if the given element is not a child\n     *     of this element\n     */\n    _removeChildImpl : function(child)\n    {\n      if (child._parent !== this) {\n        throw new Error(\"Has no child: \" + child);\n      }\n\n      // Schedule children update\n      if (this._domNode) {\n        this._scheduleChildrenUpdate();\n      }\n\n      // Remove reference to old parent\n      delete child._parent;\n    },\n\n\n    /**\n     * Internal helper for all children move needs\n     *\n     * @param child {qx.html.Element} the moved element\n     * @throws {Error} if the given element is not a child\n     *     of this element\n     */\n    _moveChildImpl : function(child)\n    {\n      if (child._parent !== this) {\n        throw new Error(\"Has no child: \" + child);\n      }\n\n      // Schedule children update\n      if (this._domNode) {\n        this._scheduleChildrenUpdate();\n      }\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      CHILDREN MANAGEMENT (EXECUTED ON THE PARENT)\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns a copy of the internal children structure.\n     *\n     * Please do not modify the array in place. If you need\n     * to work with the data in such a way make yourself\n     * a copy of the data first.\n     *\n     * @return {Array} the children list\n     */\n    getChildren : function() {\n      return this._children || null;\n    },\n\n\n    /**\n     * Get a child element at the given index\n     *\n     * @param index {Integer} child index\n     * @return {qx.html.Element|null} The child element or <code>null</code> if\n     *     no child is found at that index.\n     */\n    getChild : function(index)\n    {\n      var children = this._children;\n      return children && children[index] || null;\n    },\n\n\n    /**\n     * Returns whether the element has any child nodes\n     *\n     * @return {Boolean} Whether the element has any child nodes\n     */\n    hasChildren : function()\n    {\n      var children = this._children;\n      return children && children[0] !== undefined;\n    },\n\n\n    /**\n     * Find the position of the given child\n     *\n     * @param child {qx.html.Element} the child\n     * @return {Integer} returns the position. If the element\n     *     is not a child <code>-1</code> will be returned.\n     */\n    indexOf : function(child)\n    {\n      var children = this._children;\n      return children ? children.indexOf(child) : -1;\n    },\n\n\n    /**\n     * Whether the given element is a child of this element.\n     *\n     * @param child {qx.html.Element} the child\n     * @return {Boolean} Returns <code>true</code> when the given\n     *    element is a child of this element.\n     */\n    hasChild : function(child)\n    {\n      var children = this._children;\n      return children && children.indexOf(child) !== -1;\n    },\n\n\n    /**\n     * Append all given children at the end of this element.\n     *\n     * @param varargs {qx.html.Element} elements to insert\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    add : function(varargs) {\n      var self = this;\n      function addImpl(arr) {\n        arr.forEach(function(child) {\n          if (child instanceof qx.data.Array || qx.lang.Type.isArray(child)) {\n            addImpl(child);\n          } else {\n            self._addChildImpl(child);\n            self._children.push(child);\n          }\n        });\n      }\n      addImpl(qx.lang.Array.fromArguments(arguments));\n\n      // Chaining support\n      return this;\n    },\n\n\n    /**\n     * Inserts a new element into this element at the given position.\n     *\n     * @param child {qx.html.Element} the element to insert\n     * @param index {Integer} the index (starts at 0 for the\n     *     first child) to insert (the index of the following\n     *     children will be increased by one)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    addAt : function(child, index)\n    {\n      this._addChildImpl(child);\n      qx.lang.Array.insertAt(this._children, child, index);\n\n      // Chaining support\n      return this;\n    },\n\n\n    /**\n     * Removes all given children\n     *\n     * @param childs {qx.html.Element} children to remove\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    remove : function(childs) {\n      var children = this._children;\n      if (!children) {\n        return this;\n      }\n\n      var self = this;\n      function removeImpl(arr) {\n        arr.forEach(function(child) {\n          if (child instanceof qx.data.Array || qx.lang.Type.isArray(child)) {\n            removeImpl(child);\n          } else {\n            self._removeChildImpl(child);\n            qx.lang.Array.remove(children, child);\n          }\n        });\n      }\n      removeImpl(qx.lang.Array.fromArguments(arguments));\n      \n      // Chaining support\n      return this;\n    },\n\n\n    /**\n     * Removes the child at the given index\n     *\n     * @param index {Integer} the position of the\n     *     child (starts at 0 for the first child)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    removeAt : function(index)\n    {\n      var children = this._children;\n      if (!children) {\n        throw new Error(\"Has no children!\");\n      }\n\n      var child = children[index];\n      if (!child) {\n        throw new Error(\"Has no child at this position!\");\n      }\n\n      this._removeChildImpl(child);\n      qx.lang.Array.removeAt(this._children, index);\n\n      // Chaining support\n      return this;\n    },\n\n\n    /**\n     * Remove all children from this element.\n     *\n     * @return {qx.html.Element} A reference to this.\n     */\n    removeAll : function()\n    {\n      var children = this._children;\n      if (children)\n      {\n        for (var i=0, l=children.length; i<l; i++) {\n          this._removeChildImpl(children[i]);\n        }\n\n        // Clear array\n        children.length = 0;\n      }\n\n      // Chaining support\n      return this;\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      CHILDREN MANAGEMENT (EXECUTED ON THE CHILD)\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the parent of this element.\n     *\n     * @return {qx.html.Element|null} The parent of this element\n     */\n    getParent : function() {\n      return this._parent || null;\n    },\n\n\n    /**\n     * Insert self into the given parent. Normally appends self to the end,\n     * but optionally a position can be defined. With index <code>0</code> it\n     * will be inserted at the begin.\n     *\n     * @param parent {qx.html.Element} The new parent of this element\n     * @param index {Integer?null} Optional position\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    insertInto : function(parent, index)\n    {\n      parent._addChildImpl(this);\n\n      if (index == null) {\n        parent._children.push(this);\n      } else {\n        qx.lang.Array.insertAt(this._children, this, index);\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Insert self before the given (related) element\n     *\n     * @param rel {qx.html.Element} the related element\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    insertBefore : function(rel)\n    {\n      var parent = rel._parent;\n\n      parent._addChildImpl(this);\n      qx.lang.Array.insertBefore(parent._children, this, rel);\n\n      return this;\n    },\n\n\n    /**\n     * Insert self after the given (related) element\n     *\n     * @param rel {qx.html.Element} the related element\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    insertAfter : function(rel)\n    {\n      var parent = rel._parent;\n\n      parent._addChildImpl(this);\n      qx.lang.Array.insertAfter(parent._children, this, rel);\n\n      return this;\n    },\n\n\n    /**\n     * Move self to the given index in the current parent.\n     *\n     * @param index {Integer} the index (starts at 0 for the first child)\n     * @return {qx.html.Element} this object (for chaining support)\n     * @throws {Error} when the given element is not child\n     *      of this element.\n     */\n    moveTo : function(index)\n    {\n      var parent = this._parent;\n\n      parent._moveChildImpl(this);\n\n      var oldIndex = parent._children.indexOf(this);\n\n      if (oldIndex === index) {\n        throw new Error(\"Could not move to same index!\");\n      } else if (oldIndex < index) {\n        index--;\n      }\n\n      qx.lang.Array.removeAt(parent._children, oldIndex);\n      qx.lang.Array.insertAt(parent._children, this, index);\n\n      return this;\n    },\n\n\n    /**\n     * Move self before the given (related) child.\n     *\n     * @param rel {qx.html.Element} the related child\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    moveBefore : function(rel)\n    {\n      var parent = this._parent;\n      return this.moveTo(parent._children.indexOf(rel));\n    },\n\n\n    /**\n     * Move self after the given (related) child.\n     *\n     * @param rel {qx.html.Element} the related child\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    moveAfter : function(rel)\n    {\n      var parent = this._parent;\n      return this.moveTo(parent._children.indexOf(rel) + 1);\n    },\n\n\n    /**\n     * Remove self from the current parent.\n     *\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    free : function()\n    {\n      var parent = this._parent;\n      if (!parent) {\n        throw new Error(\"Has no parent to remove from.\");\n      }\n\n      if (!parent._children) {\n        return this;\n      }\n\n      parent._removeChildImpl(this);\n      qx.lang.Array.remove(parent._children, this);\n\n      return this;\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      DOM ELEMENT ACCESS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the DOM element (if created). Please use this with caution.\n     * It is better to make all changes to the object itself using the public\n     * API rather than to the underlying DOM element.\n     * \n     * @param create {Boolean?} if true, the DOM node will be created if it does\n     * not exist\n     * @return {Element|null} The DOM element node, if available.\n     */\n    getDomElement : function(create) {\n      if (create && !this._domNode) {\n        this.flush();\n      }\n      return this._domNode || null;\n    },\n\n\n    /**\n     * Returns the nodeName of the DOM element.\n     *\n     * @return {String} The node name\n     */\n    getNodeName : function() {\n      return this._nodeName;\n    },\n\n    /**\n     * Sets the nodeName of the DOM element.\n     *\n     * @param name {String} The node name\n     */\n    setNodeName : function(name) {\n      if (this._domNode && name.toLowerCase() !== this._nodeName.toLowerCase()) {\n        throw new Error(\"Cannot change the name of the node after the DOM node has been created\");\n      }\n      this._nodeName = name;\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EXCLUDE SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Marks the element as included which means it will be moved into\n     * the DOM again and synced with the internal data representation.\n     *\n     * @return {Node} this object (for chaining support)\n     */\n    include : function()\n    {\n      if (this._included) {\n        return this;\n      }\n\n      delete this._included;\n\n      if (this._parent) {\n        this._parent._scheduleChildrenUpdate();\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Marks the element as excluded which means it will be removed\n     * from the DOM and ignored for updates until it gets included again.\n     *\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    exclude : function()\n    {\n      if (!this._included) {\n        return this;\n      }\n\n      this._included = false;\n\n      if (this._parent) {\n        this._parent._scheduleChildrenUpdate();\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Whether the element is part of the DOM\n     *\n     * @return {Boolean} Whether the element is part of the DOM.\n     */\n    isIncluded : function() {\n      return this._included === true;\n    },\n    \n    /**\n     * Apply method for visible property\n     */\n    _applyVisible: function(value) {\n      // Nothing - to be overridden\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Registers a property and the implementations used to read the property value\n     * from the DOM and to set the property value onto the DOM.  This allows the element\n     * to have a simple `setProperty` method that knows how to read and write the value.\n     * \n     * You do not have to specify a getter or a setter - by default the setter will use\n     * `_applyProperty` for backwards compatibility, and there is no getter implementation.\n     * \n     * The functions are called with `this` set to this Element.  The getter takes\n     * the property name as a parameter and is expected to return a value, the setter takes\n     * the property name and value as parameters, and returns nothing. \n     * \n     * @param key {String} the property name\n     * @param getter {Function?} function to read from the DOM\n     * @param setter {Function?} function to copy to the DOM\n     * @param serialize {Function?} function to serialize the value to HTML\n     */\n    registerProperty: function(key, get, set, serialize) {\n      if (!this._properties) {\n        this._properties = {};\n      }\n      if (this._properties[key]) {\n        this.debug(\"Overridding property \" + key + \" in \" + this + \"[\" + this.classname + \"]\");\n      }\n      if (!set) {\n        set = qx.lang.Function.bind(function(value, key) {\n          this._applyProperty(key, value);\n        }, this);\n        qx.log.Logger.deprecatedMethodWarning(this._applyProperty, \"The method '_applyProperty' is deprecated.  Please use `registerProperty` instead (property '\" + key + \"' in \" + this.classname + \")\");\n      }\n      this._properties[key] = {\n          get: get,\n          set: set,\n          serialize: serialize,\n          value: undefined\n      }\n    },\n\n\n    \n    /**\n     * Applies a special property with the given value.\n     *\n     * This property apply routine can be easily overwritten and\n     * extended by sub classes to add new low level features which\n     * are not easily possible using styles and attributes.\n     * \n     * Note that this implementation is for backwards compatibility and\n     * implementations \n     *\n     * @param name {String} Unique property identifier\n     * @param value {var} Any valid value (depends on the property)\n     * @return {qx.html.Element} this object (for chaining support)\n     * @abstract\n     * @deprecated {6.0} please use `registerProperty` instead\n     */\n    _applyProperty : function(name, value) {\n      // empty implementation\n    },\n\n\n    /**\n     * Set up the given property.\n     *\n     * @param key {String} the name of the property\n     * @param value {var} the value\n     * @param direct {Boolean?false} Whether the value should be applied\n     *    directly (without queuing)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    _setProperty : function(key, value, direct) {\n      if (!this._properties || !this._properties[key]) {\n        this.registerProperty(key, null, null);\n      }\n\n      if (this._properties[key].value == value) {\n        return this;\n      }\n\n      this._properties[key].value = value;\n\n      // Uncreated elements simply copy all data\n      // on creation. We don't need to remember any\n      // jobs. It is a simple full list copy.\n      if (this._domNode) {\n        // Omit queuing in direct mode\n        if (direct) {\n          this._properties[key].set.call(this, value, key);\n          return this;\n        }\n\n        // Dynamically create if needed\n        if (!this._propertyJobs) {\n          this._propertyJobs = {};\n        }\n\n        // Store job info\n        this._propertyJobs[key] = true;\n\n        // Register modification\n        qx.html.Element._modified[this.toHashCode()] = this;\n        qx.html.Element._scheduleFlush(\"element\");\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Removes the given misc\n     *\n     * @param key {String} the name of the misc\n     * @param direct {Boolean?false} Whether the value should be removed\n     *    directly (without queuing)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    _removeProperty : function(key, direct) {\n      return this._setProperty(key, null, direct);\n    },\n\n\n    /**\n     * Get the value of the given misc.\n     *\n     * @param key {String} name of the misc\n     * @param direct {Boolean?false} Whether the value should be obtained directly (without queuing)\n     * @return {var} the value of the misc\n     */\n    _getProperty : function(key, direct) {\n      if (!this._properties || !this._properties[key]) {\n        return null;\n      }\n      \n      var value = this._properties[key].value;\n      if (this._domNode) {\n        if (direct || value === undefined) {\n          var fn = this._properties[key].get;\n          if (fn) {\n            this._properties[key].value = value = fn.call(this, key);\n          }\n        }\n      }\n\n      return value === undefined || value == null ? null : value;\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds an event listener to the element.\n     *\n     * @param type {String} Name of the event\n     * @param listener {Function} Function to execute on event\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener. When not given, the corresponding dispatcher\n     *         usually falls back to a default, which is the target\n     *         by convention. Note this is not a strict requirement, i.e.\n     *         custom dispatchers can follow a different strategy.\n     * @param capture {Boolean ? false} Whether capturing should be enabled\n     * @return {var} An opaque id, which can be used to remove the event listener\n     *         using the {@link #removeListenerById} method.\n     */\n    addListener : function(type, listener, self, capture)\n    {\n      if (this.$$disposed) {\n        return null;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var msg = \"Failed to add event listener for type '\" + type + \"'\" +\n          \" to the target '\" + this + \"': \";\n\n        this.assertString(type, msg + \"Invalid event type.\");\n        this.assertFunction(listener, msg + \"Invalid callback function\");\n\n        if (self !== undefined) {\n          this.assertObject(self, \"Invalid context for callback.\");\n        }\n\n        if (capture !== undefined) {\n          this.assertBoolean(capture, \"Invalid capture flag.\");\n        }\n      }\n      \n      const registerDomEvent = () => {\n        if (this._domNode) {\n          return qx.event.Registration.addListener(this._domNode, type, listener, self, capture);\n        }\n\n        if (!this.__eventValues) {\n          this.__eventValues = {};\n        }\n\n        if (capture == null) {\n          capture = false;\n        }\n\n        var unique = qx.event.Manager.getNextUniqueId();\n        var id = type + (capture ? \"|capture|\" : \"|bubble|\") + unique;\n\n        this.__eventValues[id] =\n        {\n          type : type,\n          listener : listener,\n          self : self,\n          capture : capture,\n          unique : unique\n        };\n\n        return id;\n      };\n      \n      if (qx.Class.supportsEvent(this, type)) {\n        let id = this.base(arguments, type, listener, self, capture);\n        id.domEventId = registerDomEvent();\n        return id;\n      }\n      \n      return registerDomEvent();\n\n    },\n\n\n    /**\n     * Removes an event listener from the element.\n     *\n     * @param type {String} Name of the event\n     * @param listener {Function} Function to execute on event\n     * @param self {Object} Execution context of given function\n     * @param capture {Boolean ? false} Whether capturing should be enabled\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    removeListener : function(type, listener, self, capture)\n    {\n      if (this.$$disposed) {\n        return null;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        var msg = \"Failed to remove event listener for type '\" + type + \"'\" +\n          \" from the target '\" + this + \"': \";\n\n        this.assertString(type, msg + \"Invalid event type.\");\n        this.assertFunction(listener, msg + \"Invalid callback function\");\n\n        if (self !== undefined) {\n          this.assertObject(self, \"Invalid context for callback.\");\n        }\n\n        if (capture !== undefined) {\n          this.assertBoolean(capture, \"Invalid capture flag.\");\n        }\n      }\n      \n      if (qx.Class.supportsEvent(this, type)) {\n        this.base(arguments, type, listener, self, capture);\n      }\n\n      if (this._domNode)\n      {\n        if (listener.$$wrapped_callback && listener.$$wrapped_callback[type + this.toHashCode()]) {\n          var callback = listener.$$wrapped_callback[type + this.toHashCode()];\n          delete listener.$$wrapped_callback[type + this.toHashCode()];\n          listener = callback;\n        }\n        qx.event.Registration.removeListener(this._domNode, type, listener, self, capture);\n      }\n      else\n      {\n        var values = this.__eventValues;\n        var entry;\n\n        if (capture == null) {\n          capture = false;\n        }\n\n        for (var key in values)\n        {\n          entry = values[key];\n\n          // Optimized for performance: Testing references first\n          if (entry.listener === listener && entry.self === self && entry.capture === capture && entry.type === type)\n          {\n            delete values[key];\n            break;\n          }\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Removes an event listener from an event target by an id returned by\n     * {@link #addListener}\n     *\n     * @param id {var} The id returned by {@link #addListener}\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    removeListenerById : function(id)\n    {\n      if (this.$$disposed) {\n        return null;\n      }\n      \n      if (id.domEventId) {\n        if (this._domNode) {\n          qx.event.Registration.removeListenerById(this._domNode, id.domEventId);\n        }\n        delete id.domEventId;\n        this.base(arguments, id);\n        \n      } else {\n        if (this._domNode) {\n          qx.event.Registration.removeListenerById(this._domNode, id);\n        } else {\n          delete this.__eventValues[id];\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Check if there are one or more listeners for an event type.\n     *\n     * @param type {String} name of the event type\n     * @param capture {Boolean ? false} Whether to check for listeners of\n     *         the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the object has a listener of the given type.\n     */\n    hasListener : function(type, capture)\n    {\n      if (this.$$disposed) {\n        return false;\n      }\n\n      if (qx.Class.supportsEvent(this, type)) {\n        let has = this.base(arguments, type, capture);\n        if (has) {\n          return true;\n        }\n      }\n\n      if (this._domNode) {\n        if (qx.event.Registration.hasListener(this._domNode, type, capture)) {\n          return true;\n        }\n        \n      } else {\n        var values = this.__eventValues;\n        var entry;\n  \n        if (capture == null) {\n          capture = false;\n        }\n  \n        for (var key in values) {\n          entry = values[key];\n  \n          // Optimized for performance: Testing fast types first\n          if (entry.capture === capture && entry.type === type) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Serializes and returns all event listeners attached to this element\n     * @return {Map[]} an Array containing a map for each listener. The maps\n     * have the following keys:\n     * <ul>\n     *   <li><code>type</code> (String): Event name</li>\n     *   <li><code>handler</code> (Function): Callback function</li>\n     *   <li><code>self</code> (Object): The callback's context</li>\n     *   <li><code>capture</code> (Boolean): If <code>true</code>, the listener is\n     * attached to the capturing phase</li>\n     * </ul>\n     */\n    getListeners : function() {\n      if (this.$$disposed) {\n        return null;\n      }\n\n      var listeners = [];\n      qx.lang.Array.append(listeners, qx.event.Registration.serializeListeners(this)||[]);\n      if (this._domNode) {\n        qx.lang.Array.append(listeners, qx.event.Registration.serializeListeners(this._domNode)||[]);\n      }\n\n      for (var id in this.__eventValues) {\n        var listenerData = this.__eventValues[id];\n        listeners.push({\n          type: listenerData.type,\n          handler: listenerData.listener,\n          self: listenerData.self,\n          capture: listenerData.capture\n        });\n      }\n\n      return listeners;\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCT\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    var el = this._domNode;\n    if (el)\n    {\n      qx.event.Registration.getManager(el).removeAllListeners(el);\n      el.$$element = \"\";\n      delete el.$$elementObject;\n      el.$$qxObjectHash = \"\";\n      delete el.$$qxObject;\n    }\n\n    if (!qx.core.ObjectRegistry.inShutDown)\n    {\n      var parent = this._parent;\n      if (parent && !parent.$$disposed) {\n        parent.remove(this);\n      }\n    }\n\n    this._disposeArray(\"_children\");\n\n    this._properties = this._propertyJobs = this._domNode = this._parent = this.__eventValues = null;\n  }\n});\n"
  ]
}