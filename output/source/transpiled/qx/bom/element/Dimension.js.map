{
  "version": 3,
  "sources": [
    "/home/derrell/ME/FRC/frc-elevator-sim.git/node_modules/@qooxdoo/framework/source/class/qx/bom/element/Dimension.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "getWidth",
    "element",
    "rect",
    "getBoundingClientRect",
    "Math",
    "round",
    "right",
    "left",
    "getHeight",
    "bottom",
    "top",
    "getSize",
    "width",
    "height",
    "getOuterHeight",
    "includeMargins",
    "marginTop",
    "parseInt",
    "document",
    "defaultView",
    "getComputedStyle",
    "getPropertyValue",
    "marginBottom",
    "offsetHeight",
    "getOuterWidth",
    "marginLeft",
    "marginRight",
    "offsetWidth",
    "getOuterSize",
    "__hiddenScrollbars",
    "visible",
    "hidden",
    "getContentWidth",
    "Style",
    "bom",
    "overflowX",
    "get",
    "paddingLeft",
    "paddingRight",
    "contentWidth",
    "clientWidth",
    "core",
    "Environment",
    "dom",
    "Node",
    "isBlockNode",
    "scrollWidth",
    "max",
    "getContentHeight",
    "overflowY",
    "paddingTop",
    "paddingBottom",
    "clientHeight",
    "scrollHeight",
    "getContentSize",
    "Dimension"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Contains support for calculating dimensions of HTML elements.\n *\n * We differ between the box (or border) size which is available via\n * {@link #getWidth} and {@link #getHeight} and the content or scroll\n * sizes which are available via {@link #getContentWidth} and\n * {@link #getContentHeight}.\n */\nqx.Bootstrap.define(\"qx.bom.element.Dimension\",\n{\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /**\n     * Returns the rendered width of the given element.\n     *\n     * This is the visible width of the object, which need not to be identical\n     * to the width configured via CSS. This highly depends on the current\n     * box-sizing for the document and maybe even for the element.\n     *\n     * @signature function(element)\n     * @param element {Element} element to query\n     * @return {Integer} width of the element\n     */\n    getWidth: function(element) {\n      var rect = element.getBoundingClientRect();\n      return Math.round(rect.right - rect.left);\n    },\n\n\n    /**\n     * Returns the rendered height of the given element.\n     *\n     * This is the visible height of the object, which need not to be identical\n     * to the height configured via CSS. This highly depends on the current\n     * box-sizing for the document and maybe even for the element.\n     *\n     * @signature function(element)\n     * @param element {Element} element to query\n     * @return {Integer} height of the element\n     */\n    getHeight: function(element) {\n      var rect = element.getBoundingClientRect();\n      return Math.round(rect.bottom - rect.top);\n    },\n\n\n    /**\n     * Returns the rendered size of the given element.\n     *\n     * @param element {Element} element to query\n     * @return {Map} map containing the width and height of the element\n     */\n    getSize : function(element)\n    {\n      return {\n        width: this.getWidth(element),\n        height: this.getHeight(element)\n      };\n    },\n\n    /**\n     * Returns the outer height of the given element, including height, vertical padding, and vertical borders\n     *\n     * @param element {Element} element to query\n     * @param includeMargins {Boolean?} whether to include margins in teh\n     * @return {Integer} the height of the element\n     */\n     getOuterHeight(element, includeMargins) {\n      if (includeMargins) {\n        let marginTop = parseInt(document.defaultView.getComputedStyle(element, '').getPropertyValue('margin-top'), 10);\n        let marginBottom = parseInt(document.defaultView.getComputedStyle(element, '').getPropertyValue('margin-bottom'), 10);\n        return element.offsetHeight + marginTop + marginBottom;\n      }\n      return element.offsetHeight;\n    },\n\n    /**\n     * Returns the outer width of the given element, including height, vertical padding, and vertical borders\n     *\n     * @param element {Element} element to query\n     * @param includeMargins {Boolean?} whether to include margins in teh\n     * @return {Integer} the width of the element\n     */\n     getOuterWidth(element, includeMargins) {\n      if (includeMargins) {\n        let marginLeft = parseInt(document.defaultView.getComputedStyle(element, '').getPropertyValue('margin-left'), 10);\n        let marginRight = parseInt(document.defaultView.getComputedStyle(element, '').getPropertyValue('margin-right'), 10);\n        return element.offsetWidth + marginLeft + marginRight;\n      }\n      return element.offsetWidth;\n    },\n\n    /**\n     * Returns the outer size of the given element, including height, vertical padding, and vertical borders\n     *\n     * @param element {Element} element to query\n     * @param includeMargins {Boolean?} whether to include margins in teh\n     * @return {Map} map containing the width and height of the element\n     */\n     getOuterSize(element, includeMargins) {\n      return {\n        width: this.getOuterWidth(element, includeMargins),\n        height: this.getOuterHeight(element, includeMargins)\n      };\n    },\n\n\n    /** @type {Map} Contains all overflow values where scrollbars are invisible */\n    __hiddenScrollbars :\n    {\n      visible : true,\n      hidden : true\n    },\n\n\n    /**\n     * Returns the content width.\n     *\n     * The content width is basically the maximum\n     * width used or the maximum width which can be used by the content. This\n     * excludes all kind of styles of the element like borders, paddings, margins,\n     * and even scrollbars.\n     *\n     * Please note that with visible scrollbars the content width returned\n     * may be larger than the box width returned via {@link #getWidth}.\n     *\n     * @param element {Element} element to query\n     * @return {Integer} Computed content width\n     */\n    getContentWidth : function(element)\n    {\n      var Style = qx.bom.element.Style;\n\n      var overflowX = qx.bom.element.Style.get(element, \"overflowX\");\n      var paddingLeft = parseInt(Style.get(element, \"paddingLeft\")||\"0px\", 10);\n      var paddingRight = parseInt(Style.get(element, \"paddingRight\")||\"0px\", 10);\n\n      if (this.__hiddenScrollbars[overflowX])\n      {\n        var contentWidth = element.clientWidth;\n\n        if ((qx.core.Environment.get(\"engine.name\") == \"opera\") ||\n          qx.dom.Node.isBlockNode(element))\n        {\n          contentWidth = contentWidth - paddingLeft - paddingRight;\n        }\n\n        // IE seems to return 0 on clientWidth if the element is 0px\n        // in height so we use the offsetWidth instead\n        if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n          if (contentWidth === 0 && element.offsetHeight === 0) {\n            return element.offsetWidth;\n          }\n        }\n\n        return contentWidth;\n      }\n      else\n      {\n        if (element.clientWidth >= element.scrollWidth)\n        {\n          // Scrollbars visible, but not needed? We need to substract both paddings\n          return Math.max(element.clientWidth, element.scrollWidth) - paddingLeft - paddingRight;\n        }\n        else\n        {\n          // Scrollbars visible and needed. We just remove the left padding,\n          // as the right padding is not respected in rendering.\n          var width = element.scrollWidth - paddingLeft;\n\n          // IE renders the paddingRight as well with scrollbars on\n          if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n            width -= paddingRight;\n          }\n\n          return width;\n        }\n      }\n    },\n\n\n    /**\n     * Returns the content height.\n     *\n     * The content height is basically the maximum\n     * height used or the maximum height which can be used by the content. This\n     * excludes all kind of styles of the element like borders, paddings, margins,\n     * and even scrollbars.\n     *\n     * Please note that with visible scrollbars the content height returned\n     * may be larger than the box height returned via {@link #getHeight}.\n     *\n     * @param element {Element} element to query\n     * @return {Integer} Computed content height\n     */\n    getContentHeight : function(element)\n    {\n      var Style = qx.bom.element.Style;\n\n      var overflowY = qx.bom.element.Style.get(element, \"overflowY\");\n      var paddingTop = parseInt(Style.get(element, \"paddingTop\")||\"0px\", 10);\n      var paddingBottom = parseInt(Style.get(element, \"paddingBottom\")||\"0px\", 10);\n\n      if (this.__hiddenScrollbars[overflowY])\n      {\n        return element.clientHeight - paddingTop - paddingBottom;\n      }\n      else\n      {\n        if (element.clientHeight >= element.scrollHeight)\n        {\n          // Scrollbars visible, but not needed? We need to substract both paddings\n          return Math.max(element.clientHeight, element.scrollHeight) - paddingTop - paddingBottom;\n        }\n        else\n        {\n          // Scrollbars visible and needed. We just remove the top padding,\n          // as the bottom padding is not respected in rendering.\n          return element.scrollHeight - paddingTop;\n        }\n      }\n    },\n\n\n    /**\n     * Returns the rendered content size of the given element.\n     *\n     * @param element {Element} element to query\n     * @return {Map} map containing the content width and height of the element\n     */\n    getContentSize : function(element)\n    {\n      return {\n        width: this.getContentWidth(element),\n        height: this.getContentHeight(element)\n      };\n    }\n  }\n});\n"
  ]
}