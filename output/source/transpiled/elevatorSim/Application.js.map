{
  "version": 3,
  "sources": [
    "/home/derrell/ME/FRC/frc-elevator-sim.git/source/class/elevatorSim/Application.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "enabledPeriodicInterval",
    "Class",
    "define",
    "extend",
    "application",
    "Standalone",
    "members",
    "_blockly",
    "_enabled",
    "main",
    "doc",
    "font",
    "label",
    "container",
    "scriptLoader",
    "elevatorCanvas",
    "appender",
    "log",
    "Native",
    "Console",
    "getRoot",
    "ui",
    "basic",
    "Label",
    "bom",
    "Font",
    "set",
    "size",
    "bold",
    "family",
    "setFont",
    "add",
    "top",
    "left",
    "form",
    "CheckBox",
    "addListener",
    "e",
    "elevator",
    "elevatorSim",
    "Elevator",
    "getInstance",
    "getWindow",
    "postMessage",
    "type",
    "name",
    "value",
    "getData",
    "setEnabled",
    "clearInterval",
    "setVelocity",
    "right",
    "Composite",
    "layout",
    "HBox",
    "edge",
    "window",
    "addEventListener",
    "event",
    "code",
    "data",
    "join",
    "eval",
    "setValue",
    "embed",
    "Iframe",
    "flex",
    "hide",
    "error",
    "message",
    "alert",
    "Application"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/*\n * Copyright: 2021 Derrell Lipman\n *\n * License: MIT license\n *\n * Authors: Derrell Lipman (derrell) derrell.lipman@unwireduniverse.com\n */\n\n\n/**\n * @asset(elevatorSim/*)\n * @asset(devEnv/*)\n * @ignore Blockly\n */\nvar enabledPeriodicInterval;  // global to allow eval()'ed code to use\n\nqx.Class.define(\"elevatorSim.Application\",\n{\n  extend : qx.application.Standalone,\n\n  members :\n  {\n    _blockly : null,\n    _enabled : null,\n\n    main : function()\n    {\n      let             doc;\n      let             font;\n      let             label;\n      let             container;\n      let             scriptLoader;\n      let             elevatorCanvas;\n\n      this.base(arguments);\n\n      // Enable logging in debug variant\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        let appender;\n\n        appender = qx.log.appender.Native;\n        appender = qx.log.appender.Console;\n      }\n\n      doc = this.getRoot();\n\n      // Add the title\n      label = new qx.ui.basic.Label(\"Elevator Subsystem Simulator\");\n      font = new qx.bom.Font();\n      font.set(\n        {\n          size   : 20,\n          bold   : true,\n          family : [ \"sans-serif\" ]\n        });\n      label.setFont(font);\n      doc.add(label, { top : 30, left : 10 });\n\n      // Create the Enabled checkbox\n      this._enabled = new qx.ui.form.CheckBox(\"Enabled\");\n      this._enabled.addListener(\n        \"changeValue\",\n        (e) =>\n        {\n          let             elevator = elevatorSim.Elevator.getInstance();\n\n          this._blockly.getWindow().postMessage(\n            {\n              type  : \"control\",\n              name  : \"enabled\",\n              value : e.getData()\n            },\n            \"*\");\n\n          // Enable or disable the elevator\n          elevator.setEnabled(e.getData());\n\n          if (! e.getData())\n          {\n            clearInterval(enabledPeriodicInterval);\n            elevator.setVelocity(0);\n          }\n        });\n      doc.add(this._enabled, { top : 30, right : 320 });\n\n      // Create the container to house the Blockly editor and elevator simulator\n      container = new qx.ui.container.Composite(new qx.ui.layout.HBox(10));\n      doc.add(container, { edge : 10, top : 60 });\n\n      // Await messages from Blockly\n      window.addEventListener(\n        \"message\",\n        (event) =>\n        {\n          let             code;\n\n          switch(event.data.type)\n          {\n          case \"control\" :\n            switch(event.data.name)\n            {\n            case \"run\" :\n              code =\n                [\n                  \"console.clear();\",\n                  \"elevatorSim.Elevator.getInstance().reinit();\",\n                  \"do_initially();\",\n                  event.data.value,\n                  \"enabledPeriodicInterval = setInterval(do_periodically, 50);\"\n                ].join(\"\\n\");\n              eval(code);\n              break;\n\n            case \"setEnabled\" :\n              this._enabled.setValue(event.data.value);\n              break;\n            }\n            break;\n          }\n        });\n\n      // Add the Blockly editor\n      this._blockly = new qx.ui.embed.Iframe(\"resource/devEnv/blockly.html\");\n      container.add(this._blockly, { flex : 1 });\n\n      // Add the elevator simulator\n      elevatorCanvas = elevatorSim.Elevator.getInstance();\n      container.add(elevatorCanvas);\n\n      // Initially hide it\n      elevatorCanvas.hide();\n    },\n\n    /**\n     * Disable the simulator and Show an error message\n     *\n     * @param message {String}\n     *   The message to be shown\n     *\n     * @ignore alert\n     */\n    error : function(message)\n    {\n      // Stop the simulator\n      this._enabled.setValue(false);\n\n      // Show the message\n      alert(message + \"\\nSimulation disabled\");\n    }\n  }\n});\n"
  ]
}