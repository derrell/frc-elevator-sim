{
  "version": 3,
  "sources": [
    "/home/derrell/ME/FRC/frc-elevator-sim.git/source/class/elevatorSim/Elevator.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "ui",
    "container",
    "Composite",
    "construct",
    "grid",
    "buttons",
    "elevator",
    "doorLeft",
    "doorRight",
    "opening",
    "butUp",
    "butDown",
    "butFloor1",
    "butFloor2",
    "butFloor3",
    "status",
    "set",
    "width",
    "layout",
    "Canvas",
    "backgroundColor",
    "forEach",
    "bottom",
    "i",
    "floorId",
    "toString",
    "floor",
    "core",
    "Widget",
    "height",
    "add",
    "left",
    "label",
    "basic",
    "Label",
    "setFont",
    "which",
    "j",
    "sensor",
    "sensorId",
    "_sensors",
    "hide",
    "Grid",
    "top",
    "_buttons",
    "form",
    "Button",
    "addListener",
    "e",
    "_state",
    "button",
    "row",
    "column",
    "_encoderLabel",
    "_statusElevatorEncoder",
    "HBox",
    "padding",
    "_elevator",
    "Atom",
    "minWidth",
    "flex",
    "members",
    "_timer",
    "velocity",
    "encoder",
    "Up",
    "Down",
    "_sensorAccessAllowed",
    "motorController",
    "reinit",
    "Object",
    "keys",
    "setValue",
    "setLayoutProperties",
    "setBackgroundColor",
    "isButtonPressed",
    "buttonId",
    "Init",
    "getApplication",
    "showError",
    "isFloorSensorActive",
    "sensorName",
    "getEncoder",
    "getVelocity",
    "setVelocity",
    "moveElevator",
    "distance",
    "Math",
    "abs",
    "dispose",
    "event",
    "Timer",
    "newBottom",
    "bOutOfBounds",
    "getLayoutProperties",
    "call",
    "start",
    "allowAccessEncoder",
    "show",
    "allowAccessButton",
    "allowAccessFloorSensor",
    "elevatorSim",
    "Elevator"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/*\n * Copyright: 2021 Derrell Lipman\n *\n * License: MIT license\n *\n * Authors: Derrell Lipman (derrell) derrell.lipman@unwireduniverse.com\n */\n\nqx.Class.define(\"elevatorSim.Elevator\",\n{\n  type   : \"singleton\",\n  extend : qx.ui.container.Composite,\n\n  construct : function()\n  {\n    let             grid;\n    let             buttons;\n    let             elevator;\n    let             doorLeft;\n    let             doorRight;\n    let             opening;\n    let             butUp;\n    let             butDown;\n    let             butFloor1;\n    let             butFloor2;\n    let             butFloor3;\n    let             status;\n\n    this.base(arguments);\n\n    // Set overall elevator attributes\n    this.set(\n      {\n        width           : 300,\n        layout          : new qx.ui.layout.Canvas(),\n        backgroundColor : \"white\"\n      });\n\n    //\n    // Add the floors\n    // Numbers are top pixel of each floor\n    //\n    [ 10, 135, 260, 385 ].forEach(\n      (bottom, i) =>\n      {\n        let             floorId = (i + 1).toString();\n        let             floor = new qx.ui.core.Widget();\n\n        // Add the floor itself\n        floor.set(\n          {\n            height          : 10,\n            width           : 180,\n            backgroundColor : \"black\"\n          });\n\n        this.add(\n          floor,\n          {\n            left   : 60,\n            bottom : bottom\n          });\n\n        if (i < 3)\n        {\n          // Add the floor label\n          let label = new qx.ui.basic.Label(\"Floor \" + (i + 1));\n          label.setFont(\"bold\");\n          this.add(\n            label,\n            {\n              left   : 20,\n              bottom : bottom + 60\n            });\n\n          // For each of bottom and top, add the sensors\n          [ \"B\", \"T\" ].forEach(\n            (which, j) =>\n            {\n              let             sensor;\n              let             sensorId = floorId + which;\n\n              this._sensors[sensorId] = sensor = new qx.ui.core.Widget();\n              sensor.set(\n                {\n                  height          : 4,\n                  width           : 20,\n                  backgroundColor : i == 0 ? \"#008000\" : \"#800000\"\n                });\n              this.add(\n                sensor,\n                {\n                  left   : 76,\n                  bottom : j == 0 ? bottom + 10 : bottom + 115 + 6\n                });\n              sensor.hide();\n            });\n        }\n      });\n\n\n    // Add the button container\n    buttons = new qx.ui.container.Composite(new qx.ui.layout.Grid(10, 4));\n    this.add(\n      buttons,\n      {\n        left   : 20,\n        top    : 0\n      });\n\n    //\n    // Add the buttons\n    //\n\n    this._buttons[\"1\"] = butFloor1 = new qx.ui.form.Button(\"1\");\n    butFloor1.addListener(\"pointerdown\",\n                          (e) => { this._state.button[\"1\"] = true; });\n    butFloor1.addListener(\"pointerup\",\n                          (e) => { this._state.button[\"1\"] = false; });\n    butFloor1.addListener(\"pointerout\",\n                          (e) => { this._state.button[\"1\"] = false; });\n    buttons.add(butFloor1, { row : 2, column : 1 });\n\n    this._buttons[\"2\"] = butFloor2 = new qx.ui.form.Button(\"2\");\n    butFloor2.addListener(\"pointerdown\",\n                          (e) => { this._state.button[\"2\"] = true; });\n    butFloor2.addListener(\"pointerup\",\n                          (e) => { this._state.button[\"2\"] = false; });\n    butFloor2.addListener(\"pointerout\",\n                          (e) => { this._state.button[\"2\"] = false; });\n    buttons.add(butFloor2, { row : 1, column : 1 });\n\n    this._buttons[\"3\"] = butFloor3 = new qx.ui.form.Button(\"3\");\n    butFloor3.addListener(\"pointerdown\",\n                          (e) => { this._state.button[\"3\"] = true; });\n    butFloor3.addListener(\"pointerup\",\n                          (e) => { this._state.button[\"3\"] = false; });\n    butFloor3.addListener(\"pointerout\",\n                          (e) => { this._state.button[\"3\"] = false; });\n    buttons.add(butFloor3, { row : 0, column : 1 });\n\n    this._buttons[\"Up\"] = butUp = new qx.ui.form.Button(\"Up\");\n    butUp.addListener(\"pointerdown\",\n                          (e) => { this._state.button[\"Up\"] = true; });\n    butUp.addListener(\"pointerup\",\n                          (e) => { this._state.button[\"Up\"] = false; });\n    butUp.addListener(\"pointerout\",\n                          (e) => { this._state.button[\"Up\"] = false; });\n    buttons.add(butUp, { row : 0, column : 0 });\n\n    this._buttons[\"Down\"] = butDown = new qx.ui.form.Button(\"Down\");\n    butDown.addListener(\"pointerdown\",\n                          (e) => { this._state.button[\"Down\"] = true; });\n    butDown.addListener(\"pointerup\",\n                          (e) => { this._state.button[\"Down\"] = false; });\n    butDown.addListener(\"pointerout\",\n                          (e) => { this._state.button[\"Down\"] = false; });\n    buttons.add(butDown, { row : 2, column : 0 });\n\n    //\n    // Add the status fields\n    //\n    grid = new qx.ui.layout.Grid(10, 4);\n    status = new qx.ui.container.Composite(grid);\n    this.add(\n      status,\n      {\n        left   : 160,\n        top    : 0\n      });\n\n    this._encoderLabel = new qx.ui.basic.Label(\"Encoder:\");\n    this._encoderLabel.hide();\n    status.add(this._encoderLabel, { row : 0, column : 0 });\n\n    // Create the label where we'll place the \"encoder\" value\n    this._statusElevatorEncoder = new qx.ui.basic.Label(\"20\");\n    this._statusElevatorEncoder.hide();\n    status.add(this._statusElevatorEncoder, { row : 0, column : 1 });\n\n    //\n    // Add the elevator\n    //\n\n    // Create the elevator\n    elevator = new qx.ui.container.Composite(new qx.ui.layout.HBox());\n    elevator.set(\n      {\n        height          : 115,\n        width           : 100,\n        padding         : 10,\n        backgroundColor : \"#dddddd\"\n      });\n    this._elevator = elevator;\n\n    // Add the left door\n    doorLeft = new qx.ui.basic.Atom();\n    doorLeft.set(\n      {\n        width           : 5,\n        minWidth        : 0,\n        backgroundColor : \"gray\"\n      });\n    elevator.add(doorLeft, { flex : 1 });\n\n    // Add the opening between the doors\n    opening = new qx.ui.basic.Atom();\n    opening.set(\n      {\n        width           : 2,\n        minWidth        : 0,\n        backgroundColor : \"blue\"\n      });\n    elevator.add(opening);\n\n    // Add the right door\n    doorRight = new qx.ui.basic.Atom();\n    doorRight.set(\n      {\n        width           : 5,\n        minWidth        : 0,\n        backgroundColor : \"gray\"\n      });\n    elevator.add(doorRight, { flex : 1 });\n\n    // Add the elevator to the graphics canvas\n    this.add(\n      elevator,\n      {\n        left   : 100,\n        bottom : 20\n      });\n  },\n\n  members :\n  {\n    _timer                 : null,\n    _elevator              : null,\n    _encoderLabel          : null,\n    _statusElevatorEncoder : null,\n    _buttons               : {},\n    _sensors               : {},\n    _state                 :\n    {\n      velocity               : 0,\n      encoder                : 20,\n      button                 :\n      {\n        Up                     : false,\n        Down                   : false,\n        \"1\"                    : false,\n        \"2\"                    : false,\n        \"3\"                    : false\n      },\n      sensor                :\n      {\n        \"1B\"                   : true, // floor 1 bottom\n        \"1T\"                   : true, // floor 1 top\n        \"2B\"                   : false, // ...\n        \"2T\"                   : false,\n        \"3B\"                   : false,\n        \"3T\"                   : false,\n      }\n    },\n    _sensorAccessAllowed   :\n    {\n      motorController        : false,\n      encoder                : false,\n      button                 :\n      {\n        Up                     : false,\n        Down                   : false,\n        \"1\"                    : false,\n        \"2\"                    : false,\n        \"3\"                    : false\n      },\n      sensor                 :\n      {\n        \"1B\"                   : false, // floor 1 bottom\n        \"1T\"                   : false, // floor 1 top\n        \"2B\"                   : false, // ...\n        \"2T\"                   : false,\n        \"3B\"                   : false,\n        \"3T\"                   : false,\n      }\n    },\n\n    /**\n     * Reinitialize the elevator to its initial location\n     */\n    reinit : function()\n    {\n      // Reinitialize sensor access\n      this._sensorAccessAllowed =\n        {\n          motorController        : false,\n          encoder                : false,\n          button                 :\n          {\n            Up                     : false,\n            Down                   : false,\n            \"1\"                    : false,\n            \"2\"                    : false,\n            \"3\"                    : false\n          },\n          sensor                 :\n          {\n            \"1B\"                   : false, // floor 1 bottom\n            \"1T\"                   : false, // floor 1 top\n            \"2B\"                   : false,\n            \"2T\"                   : false,\n            \"3B\"                   : false,\n            \"3T\"                   : false,\n          }\n        };\n\n      // Reinialize state\n      this._state =\n        {\n          velocity               : 0,\n          encoder                : 20,\n          button                 :\n          {\n            Up                     : false,\n            Down                   : false,\n            \"1\"                    : false,\n            \"2\"                    : false,\n            \"3\"                    : false\n          },\n          sensor                :\n          {\n            \"1B\"                   : true, // floor 1 bottom\n            \"1T\"                   : true, // floor 1 top\n            \"2B\"                   : false, // ...\n            \"2T\"                   : false,\n            \"3B\"                   : false,\n            \"3T\"                   : false,\n          }\n        };\n\n\n      // Hide the sensors\n      Object.keys(this._state.sensor).forEach(\n        (sensorId) =>\n        {\n          this._sensors[sensorId].hide();\n        });\n\n      // Hide the elevator\n      this.hide();\n\n      // Reset the encoder to the initial position\n      this._state.encoder = 20;\n      this._statusElevatorEncoder.setValue(\"20\");\n\n      // Move the elevator to the initial position\n      this._elevator.setLayoutProperties(\n        {\n          bottom : this._state.encoder\n        });\n\n      // Reset the background color to indicate no crash\n      this.setBackgroundColor(\"white\");\n    },\n\n    /**\n     * Return the specified button's state\n     *\n     * @param buttonId {String}\n     *   The ID (label) of the button whose value is requested\n     *\n     * @return {Boolean}\n     *   Whether the specified button is currently pressed\n     */\n    isButtonPressed : function(buttonId)\n    {\n      // Ensure the button has been properly initialized\n      if (! this._sensorAccessAllowed.button[buttonId])\n      {\n        qx.core.Init.getApplication().showError(\n          `Button ${buttonId} accessed without being Connected`);\n        return false;\n      }\n\n      return this._state.button[buttonId];\n    },\n\n    /**\n     * Return whether the specified floor sensor is detecting the elevator\n     *\n     * @param sensorId {String}\n     *   The ID of the sensor whose value is requested\n     *\n     * @return {Boolean}\n     *   Whether the specified sensor is currently active (sensing elevator)\n     */\n    isFloorSensorActive : function(sensorId)\n    {\n      // Ensure the floor sensor has been properly initialized\n      if (! this._sensorAccessAllowed.sensor[sensorId])\n      {\n        let             sensorName;\n\n        switch(sensorId)\n        {\n        case \"1B\" :\n          sensorName = \"Floor 1 Bottom\";\n          break;\n\n        case \"1T\" :\n          sensorName = \"Floor 1 Top\";\n          break;\n\n        case \"2B\" :\n          sensorName = \"Floor 2 Bottom\";\n          break;\n\n        case \"2T\" :\n          sensorName = \"Floor 2 Top\";\n          break;\n\n        case \"3B\" :\n          sensorName = \"Floor 3 Bottom\";\n          break;\n\n        case \"3T\" :\n          sensorName = \"Floor 3 Top\";\n          break;\n        }\n\n        qx.core.Init.getApplication().showError(\n          `Sensor at ${sensorName} accessed without being Connected`);\n        return false;\n      }\n\n      return this._state.sensor[sensorId];\n    },\n\n    /**\n     * Get the current encoder value\n     */\n    getEncoder : function()\n    {\n      // Ensure the encoder has been properly initialized\n      if (! this._sensorAccessAllowed.encoder)\n      {\n        qx.core.Init.getApplication().showError(\n          `Encoder accessed without being Connected`);\n        return false;\n      }\n\n      return this._state.encoder;\n    },\n\n    /**\n     * Get the most recently set velocity\n     */\n    getVelocity : function()\n    {\n      // Ensure the motor controller has been properly initialized\n      if (! this._sensorAccessAllowed.motorController)\n      {\n        qx.core.Init.getApplication().showError(\n          `Motor Controller accessed without being Connected`);\n        return false;\n      }\n\n      return this._state.velocity;\n    },\n\n    /**\n     * Move the elevator up or down at a given velocity\n     *\n     * @param velocity {Number}\n     *   Velocity, in the range [ -100, 100 ].\n     *   Positive values cause the elevator to go down; negative, up.\n     *   Velocity 0 means stop.\n     */\n    setVelocity : function(velocity)\n    {\n      let             moveElevator;\n      let             distance = velocity > 0 ? -1 : 1;\n\n      // Limit the velocity to range [ -100, 100 ] and we need only its\n      // magnitude, as we've already pulled the sign off to use as the\n      // distance to move on each timer expiration\n      velocity = Math.floor(Math.abs(velocity));\n      if (velocity > 100)\n      {\n        velocity = 100;\n      }\n      if (velocity < 0)\n      {\n        velocity = 0;\n      }\n\n      // Save the new velocity in the elevator state\n      this._state.velocity = velocity;\n\n      // Stop any existing timer\n      if ( this._timer)\n      {\n        this._timer.dispose();\n        this._timer = null;\n      }\n\n      // If we were asked to stop moving...\n      if (velocity === 0)\n      {\n        // ... then there's nothing more to do\n        return;\n      }\n\n      // Create a timer for the animation. The interval is the inverse\n      // of velocity: a higher velocity means that the interval is smaller.\n      this._timer = new qx.event.Timer(100 - velocity);\n\n      // Handle each frame of the animation\n      moveElevator = function()\n        {\n          let             newBottom;\n          let             bOutOfBounds = false;\n            \n          // Get the new bottom position of the elevator by adding the\n          // positive or negative distance\n          newBottom = this._elevator.getLayoutProperties().bottom + distance;\n          \n          // Don't get any lower than the minimum\n          if (newBottom > 300)\n          {\n            newBottom = 300;\n          }\n\n          // Don't get any higher than the maximum\n          if (newBottom < 0)\n          {\n            newBottom = 0;\n          }\n\n          if (newBottom > 290 || newBottom < 15)\n          {\n            bOutOfBounds = true;\n          }\n\n          // Set the background color to indicate out of bounds, if necessary\n          this.setBackgroundColor(bOutOfBounds ? \"red\" : \"white\");\n\n          // Update the \"encoder\" elevator state and readout\n          this._statusElevatorEncoder.setValue(newBottom.toString());\n          this._state.encoder = newBottom;\n\n          // Update the sensor states. First, indicate all sensors see nothing\n          [ \"1B\", \"1T\", \"2B\", \"2T\", \"3B\", \"3T\" ].forEach(\n            (sensorId) =>\n            {\n              let             sensor = this._sensors[sensorId];\n\n              sensor.setBackgroundColor(\"#800000\");\n              this._state.sensor[sensorId] = false;\n            });\n\n          // Now indicate any that are seeing the elevator\n          if (newBottom <= 20)\n          {\n            this._sensors[\"1B\"].setBackgroundColor(\"#008000\");\n            this._state.sensor[\"1B\"] = true;\n          }\n          if (newBottom >= 20 && newBottom <= 134)\n          {\n            this._sensors[\"1T\"].setBackgroundColor(\"#008000\");\n            this._state.sensor[\"1T\"] = true;\n          }\n          if (newBottom >= 31 && newBottom <= 145)\n          {\n            this._sensors[\"2B\"].setBackgroundColor(\"#008000\");\n            this._state.sensor[\"2B\"] = true;\n          }\n          if (newBottom >= 145 && newBottom <= 259)\n          {\n            this._sensors[\"2T\"].setBackgroundColor(\"#008000\");\n            this._state.sensor[\"2T\"] = true;\n          }\n          if (newBottom >= 156 && newBottom <= 271)\n          {\n            this._sensors[\"3B\"].setBackgroundColor(\"#008000\");\n            this._state.sensor[\"3B\"] = true;\n          }\n          if (newBottom >= 270)\n          {\n            this._sensors[\"3T\"].setBackgroundColor(\"#008000\");\n            this._state.sensor[\"3T\"] = true;\n          }\n\n          // Cause the elevator to move in the canvas\n          this._elevator.setLayoutProperties(\n              {\n                bottom : newBottom\n              });\n          \n          // Have we reached our hard-stop ending point?\n          if ((distance > 0 && newBottom >= 300) ||\n              (distance < 0 && newBottom <= 0))\n          {\n            // Yup. Animation is complete\n            this._timer.dispose();\n            this._timer = null;\n          }\n        };\n\n      // Move the elevator its first step immediately\n      moveElevator.call(this);\n\n      // If the timer is still active (we didn't cancel it in first step)...\n      if (this._timer)\n      {\n        // ... then also animate its motion\n        this._timer.addListener(\"interval\", moveElevator, this);\n      \n        // Begin the animation\n        this._timer.start();\n      }\n    },\n\n    /**\n     * Allow access to the encoder\n     */\n    allowAccessEncoder : function()\n    {\n      this._sensorAccessAllowed.encoder = true;\n      this._encoderLabel.show();\n      this._statusElevatorEncoder.show();\n    },\n\n    /**\n     * Allow access to the specified button\n     *\n     * @param button {String}\n     *   The name of the button to provide access to:\n     *   \"Up\", \"Down\", \"1\", \"2\", \"3\"\n     */\n    allowAccessButton : function(button)\n    {\n      this._sensorAccessAllowed.button[button] = true;\n    },\n\n    /**\n     * Allow access to the specified floor sensor\n     *\n     * @param sensor {String}\n     *   The name of the sensor to provide access to:\n     *   \"1B\", \"1T\", \"2B\", \"2T\", \"3B\", \"3T\"\n     */\n    allowAccessFloorSensor : function(sensor)\n    {\n      this._sensorAccessAllowed.sensor[sensor] = true;\n      this._sensors[sensor].show();\n    }\n  }\n});\n"
  ]
}